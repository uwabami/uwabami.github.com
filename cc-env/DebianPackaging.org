#+TITLE: パッケージ作成環境: sbuild, lintian, piuparts, autopkgtest
#+DATE: 2017-09-09 17:35:29
#+LANGUAGE: ja
#+REF: cc-env/DebianPackaging
#+LAYOUT: cc-env
#+SETUPFILE: ~/Public/_setup.org
#+PERMALINK: /cc-env/DebianPackaging.html
Related [[wiki:index][Index]] [[id:591f6b0d-55ff-48eb-b095-401cdfa0d536][Debian]]
* はじめに
  Debian パッケージを作成するため
  - [[id:74d27536-cf49-4780-8b6d-2e7b22027785][=sbuild=: clean room build 環境]] :ビルド時の依存環境をテストしつつビルドする
  - [[id:0b5136f9-4bea-4417-849a-96f5f95b6504][=lintian=: パッケージの品質のチェック]]
  - [[id:bcb9e308-7a2d-4bab-8876-30b8eedaf43c][=piuparts=: パッケージとしてのテスト]]
  - [[id:d2393bd8-c286-44ad-a23a-b50893ee82f3][=autopkgtest=: ビルドしたバイナリの実行テスト]]
  ができるようにしておきます.
* TODO =sbuild=: clean room build 環境
  :PROPERTIES:
  :ID:       74d27536-cf49-4780-8b6d-2e7b22027785
  :END:
  clean room build 環境としては
  - pbuilder/cowbuilder/qemubuilder
  - sbuild
  の二通りがあります. どちらが良いのか, は完全に好みの問題だと思いますが
  Debian 公式のビルドインフラが sbuild なので, 私は sbuild を使っています.
  sbuild に関しては [[https://wiki.debian.org/sbuild][sbuild - Debian Wiki]] を参照下さい.

  - [ ] sbuild の build 環境に lxc って使えたりしないかな...?
** インストールと設定
   ほぼ, 上述の wiki の通り:
   #+BEGIN_EXAMPLE
sudo apt-get install sbuild
sudo sbuild-adduser $LOGNAME
newgrp sbuild
   #+END_EXAMPLE
   chroot の作成は以下
   #+BEGIN_SRC sh
for a in amd64 i386; do
  for d in stable testing unstable ; do
    sudo LANG=C sbuild-createchroot --arch=$a --include=eatmydata,gnupg $d \
        /srv/chroot/$d-$a-sbuild http://dennou-k.gfd-dennou.org/debian
  done
done
   #+END_SRC
   これで, =/srv/chroot/= 以下に sbuild 用の chroot 環境ができる.
   ついでに =/etc/schroot/chroot.d/= 以下に sbuild 用の設定ファイルができるので,
   #+BEGIN_SRC conf
union-type=overlay
union-overlay-directory=/dev/shm
   #+END_SRC
   を設定しておくと良い(overlayfs で動作します)
   #+BEGIN_SRC sh
for conf in $(grep -l ’^union-type=’ /etc/schroot/chroot.d/*-sbuild*); do
    if ! grep -q "^union-type=" "$conf" ; then
        echo  'union-type=overlay' | sudo tee  --append "$conf"
        echo ’union-overlay-directory=/dev/shm’ | sudo tee --append "$conf"
    fi
done
   #+END_SRC
   sbuild の設定は =~/.sbuildrc= に書いておく.
   末尾にあるのでそちらを参照のこと．
* =lintian=: パッケージの品質のチェック
  :PROPERTIES:
  :ID:       0b5136f9-4bea-4417-849a-96f5f95b6504
  :END:
  作成したパッケージが Debian Policy に準拠しているかを
  チェックするパッケージである lintian を導入.
  #+BEGIN_EXAMPLE
% sudo apt-get install lintian
  #+END_EXAMPLE
  設定は以下の通り. =pedantic= と =info= は, まあ趣味でしょうか.
#+INCLUDE: ~/.lintianrc src conf

  sbuild からの呼び出しは =~/.sbuildrc= において
  #+BEGIN_SRC perl
## lintinan
# build 後に lintian を走らせる
$run_lintian = 1;
# lintian の option. お好みで。
$lintian_opts = ['-i', '-I'];
  #+END_SRC
  とでもしておくと良いだろう.
* =piuparts=: パッケージとしてのテスト
  :PROPERTIES:
  :ID:       bcb9e308-7a2d-4bab-8876-30b8eedaf43c
  :END:
  ビルドしたパッケージについて
  インストール, アップグレード, リムーブ, パージのテストを行なえる
  piuparts を導入しておく.
  #+BEGIN_EXAMPLE
% sudo apt-get install piuparts
  #+END_EXAMPLE
  実際の呼び出しは sbuild から行なう.
  #+BEGIN_SRC perl
## piuparts
# build 後に piuparts を走らせる
$run_piuparts = 1;
# piuparts の option。ここでは sbuild 用に作成した schroot で走らせる
$piuparts_opts = ['-N', '-d', '%r', '--keep-sources-list', '--schroot', '%r-%a-sbuild'];
# root_args
$piuparts_root_args = ['sudo', '--'];
  #+END_SRC
* =autopkgtest=: ビルドしたバイナリの実行テスト
  :PROPERTIES:
  :ID:       d2393bd8-c286-44ad-a23a-b50893ee82f3
  :END:
  autopkgtest パッケージを導入しておく.
** 初期設定
   autopkgtest 環境として, schroot を使うか lxc を使うか, がある.
   当然ながら schroot の方が overhead が少ないのだが,
   [[https://ci.debian.net/][Debian Continuous Integration]] での動作テストもあるので,
   debci に揃えることに.

   LXC の基本設定や dnsmasq での DHCP 取得ができるようになっていると,
   あとは debci setup で良い...のだと思う. *本来は*
   #+BEGIN_EXAMPLE
% sudo apt install debci
% sudo MIRROR="http://dennou-k.gfd-dennou.org/debian" \
   debci setup -s unstable --backend lxc -a amd64
   #+END_EXAMPLE
   ここではまった.
   - 今使っている環境が btrfs
   - debci setup → autopkgtest-build-lxc が呼ばれる
   - autopkgtest-build-lxc では lxc-create で "-B best" が呼ばれている
   - btrfs と lxc-destroy に関するバグ? なのか, コンテナの差分更新後 lxc-destroy ができずに失敗する
   というオチに.

   結局
   #+BEGIN_SRC diff
--- /usr/bin/autopkgtest-build-lxc.orig	2017-09-07 20:15:12.615081394 +0900
+++ /usr/bin/autopkgtest-build-lxc	2017-09-07 20:16:31.584016755 +0900
@@ -150,14 +150,14 @@

 if [ ! -e $LXCDIR/$NAME ]; then
     # first-time run: just create the container
-    $LXC_CREATE_PREFIX lxc-create -B best --name=$NAME $LXC_ARGS
+    $LXC_CREATE_PREFIX lxc-create --name=$NAME $LXC_ARGS
     setup $NAME
 else
     # remove LXC rootfs caches; on btrfs this might be a subvolume, otherwise
     # rm it
     btrfs subvolume delete /var/cache/lxc/$RELEASE/rootfs-* 2>/dev/null || rm -rf /var/cache/lxc/$RELEASE/rootfs-*
     # create a new rootfs in a temp container
-    $LXC_CREATE_PREFIX lxc-create -B best --name=${NAME}.new $LXC_ARGS
+    $LXC_CREATE_PREFIX lxc-create --name=${NAME}.new $LXC_ARGS
     setup ${NAME}.new
     sed -i "s/${NAME}.new/${NAME}/" $LXCDIR/${NAME}.new/rootfs/etc/hostname $LXCDIR/${NAME}.new/rootfs/etc/hosts
     # replace the original rootfs; can't make this more atomic unfortunately
   #+END_SRC
   なんて事をして,
   #+BEGIN_EXAMPLE
% sudo dpkg-divert \
  --divert /usr/bin/autopkgtest-build-lxc.orig
  --rename /usr/bin/autopkgtest-build-lxc
   #+END_EXAMPLE
   としてお茶を濁す.
   - [ ] 設定ファイルがあったらそっちを優先して欲しいのだが.
** sbuild からの呼び出し
   面倒なのは lxc を使う場合には =stretch=, =buster=, =sid= とコードネームなのに対して,
   sbuild/schroot の release は =unstable= だったりするところ.

   sbuild 自体にも autopkgtest の呼び出しはあるが, ここでは external_commands で
   呼び出すことにする.
   #+BEGIN_SRC perl
## autopkgtest
# build 後に autopkgtest の実行 ⇒ 実行しない. post-build-commands で実行
$run_autopkgtest = 0;
# sbuild 用に作成した schroot で走らせる場合は以下を有効に
# $autopkgtest_opts = ['-U', '--', 'schroot', '%r-%a-sbuild'];
# $autopkgtest_root_args = ['sudo', '--'];
   #+END_SRC
   外部コマンドの呼び出しは以下
   #+BEGIN_SRC perl
# 外部スクリプトで autopkgtest, rdepends の autopkgstest
$external_commands = {
                      'post-build-commands' =>
                      ['/home/uwabami/.sbuild.d/sbuild-debci-rdepends %c %e'],
                     };
   #+END_SRC
* =~/.sbuildrc=
  現在の =~/.sbuildrc= は以下の通り
#+INCLUDE: ~/.sbuildrc src perl
* =~/.sbuild.d/sbuild-debci-rdepends=
  post-build-commands で呼び出す autopkgtest の呼び出しは以下
#+INCLUDE: ~/.sbuild.d/sbuild-debci-rdepends src sh
